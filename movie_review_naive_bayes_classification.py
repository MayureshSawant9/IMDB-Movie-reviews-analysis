# -*- coding: utf-8 -*-
"""Movie Review - Naive Bayes classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-trpAN-1jLvtWzVokqhxcJEdl2N61MO-

# **Import Libraries**
"""

import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt

"""# Load the IMDb movie reviews dataset"""

df = pd.read_csv('/content/IMDB-Dataset.csv')

"""# Preview Dataset"""

print(df.sample(5))

df.describe()

df.info()

"""# Split dataset into train and test sets"""

X = df['review']
Y = df['sentiment']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

"""# Vectorize text data using TF-IDF"""

tfidf_vectorizer = TfidfVectorizer(max_features=5000)
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

"""# Train Naive Bayes classifier"""

nb_classifier = MultinomialNB()
nb_classifier.fit(X_train_tfidf, Y_train)

"""# Evaluate classifier"""

Y_pred = nb_classifier.predict(X_test_tfidf)
accuracy = accuracy_score(Y_test, Y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(Y_test, Y_pred))

"""# Sample predict"""

sample_review1 = r"This movie is absolutely terrible. The directing, acting, \
script and production are all bad. There is actually NOTHING redeemable about it."
data = tfidf_vectorizer.transform([sample_review1]).toarray()
print(nb_classifier.predict(data))

sample_review2 = r"I absolutely loved this movie! The acting was superb, \
the storyline was captivating, and the cinematography was stunning. \
I was on the edge of my seat throughout the entire film."
data = tfidf_vectorizer.transform([sample_review2]).toarray()
print(nb_classifier.predict(data))

"""# Plot confusion matrix"""

cm = confusion_matrix(Y_test, Y_pred)
plt.imshow(cm, interpolation="nearest", cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.colorbar()
plt.xlabel("Predicted Labels")
plt.ylabel("True Labels")
plt.show()

"""# Plot class distribution"""

plt.figure(figsize=(8, 5))
df['sentiment'].value_counts().plot(kind='bar', color=['blue', 'orange'])
plt.title('Class Distribution')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.xticks([0, 1], ['Negative', 'Positive'], rotation=0)
plt.show()

"""# ROC (Receiver Operating Characteristic) curve"""

from sklearn.metrics import roc_curve, auc
Y_pred_proba = nb_classifier.predict_proba(X_test_tfidf)[:,1]
fpr, tpr, _ = roc_curve(Y_test, Y_pred_proba, pos_label='positive')
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 5))
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (AUC = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

"""# Top common words Bar graph"""

from collections import Counter

all_reviews = ' '.join(df['review'])
words = all_reviews.split()
word_counts = Counter(words)

top_words = word_counts.most_common(20)
top_word_labels = [word[0] for word in top_words]
top_word_counts = [word[1] for word in top_words]

plt.figure(figsize=(10, 6))
plt.bar(top_word_labels, top_word_counts, color='skyblue')
plt.title('Top 20 Most Common Words in IMDb Movie Reviews')
plt.xlabel('Words')
plt.ylabel('Frequency')
plt.xticks(rotation=45)
plt.show()

"""# Histogram of length of reviews"""

review_lengths = df['review'].apply(len)

# Plot a histogram of review lengths
plt.figure(figsize=(10, 6))
plt.hist(review_lengths, bins=50, color='skyblue', edgecolor='black')
plt.title('Histogram of Review Lengths')
plt.xlabel('Review Length')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()